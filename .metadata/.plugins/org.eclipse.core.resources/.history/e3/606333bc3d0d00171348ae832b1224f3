package thread;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class longest_palindromic_substring {

	public static void main(String args[]) throws IOException
	{
	   BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
	   System.out.println("enter the string");
	   String str= br.readLine();
	   lps(str);
	}
	
	public static void lps(String str)
	{
		int len= str.length();
		int max_len=1;
		int s_index=0;
		int arr[][]= new int [len+1][len+1];
		for(int i=1;i<=len;i++)  // 1 character is always palindrome
		{
			arr[i][i]=1;
		}
		for(int i=1;i<len;i++)   // check for 2 character
		 {
			if(str.charAt(i-1)==str.charAt(i))
			{
				arr[i][i+1]=1;
				s_index=i-1;
				max_len=2;
			}
			
			else arr[i][i+1]=0;
			
		 }
		 
		
		for(int i=3;i<=len;i++)
		 {
			 int j= len-i+1;
		     for(int k=1;k<=j;k++)
		     {
		        if(str.charAt(k-1)==str.charAt(k+i-2)&&arr[k+1][k+i-3]==1)
		        {
		           s_index=k-1;
		           arr[k][k+i-1]=1;
		           if(max_len<i)
		        	   max_len=i;
		        }
		        else 
		        {
		          arr[k][k+i-1]=0;	
		        }
		     }
			 
			 
		 }
		str=str.substring(s_index, s_index+max_len);
		System.out.println(str);
		
	}
	
}

